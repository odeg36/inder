<?php

namespace LogicBundle\Repository;

use Doctrine\ORM\EntityRepository;
use LogicBundle\Entity\Oferta;
use LogicBundle\Entity\Reserva;

/**
 * BloqueoEscenarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BloqueoEscenarioRepository extends EntityRepository {

    public function buscarDivisionesBloqueadasReserva(Reserva $reserva) {
        $em = $this->getEntityManager();
        $fechaInicial = date($reserva->getFechaInicio()->format("Y-m-d"));
        $fechaFinal = date($reserva->getFechaFinal()->format("Y-m-d"));
        $dias = [];
        while ($fechaInicial <= $fechaFinal) {
            $dias[] = date('N', strtotime($fechaInicial));
            $fechaInicial = strtotime('+1 day', strtotime($fechaInicial));
            $fechaInicial = date('Y-m-d', $fechaInicial);
        }

        $em = $this->getEntityManager();
        $dql = "SELECT b FROM LogicBundle:BloqueoEscenario b
                INNER JOIN LogicBundle:EscenarioDeportivo e WITH e.id = b.escenarioDeportivo 
                WHERE b.fechaInicial BETWEEN :inicio AND :fin OR b.fechaFinal BETWEEN :inicio AND :fin 
                AND e.id = :escenario 
                AND (";
        $cumplio = false;
        foreach ($reserva->getProgramaciones() as $key => $progrmacionReserva) {
            if ($progrmacionReserva->getInicioManana() && $progrmacionReserva->getInicioTarde()) {
                if ($cumplio) {
                    $dql .= " OR ";
                }
                $dql .= "b.horaInicial BETWEEN '" . $progrmacionReserva->getInicioManana()->format("H:i") . "' AND '" . $progrmacionReserva->getFinTarde()->format("H:i") . "'";
                $cumplio = true;
            } else if ($progrmacionReserva->getInicioManana()) {
                if ($cumplio) {
                    $dql .= " OR ";
                }
                $dql .= "b.horaInicial BETWEEN '" . $progrmacionReserva->getInicioManana()->format("H:i") . "' AND '" . $progrmacionReserva->getFinManana()->format("H:i") . "'";
                $cumplio = true;
            } else if ($progrmacionReserva->getInicioTarde()) {
                if ($cumplio) {
                    $dql .= " OR ";
                }
                $dql .= "b.horaInicial BETWEEN '" . $progrmacionReserva->getInicioTarde()->format("H:i") . "' AND '" . $progrmacionReserva->getFinTarde()->format("H:i") . "'";
                $cumplio = true;
            }
        }
        $dql .= ")";
        $parameters = [];
        $parameters["escenario"] = $reserva->getEscenarioDeportivo()->getId();
        $parameters["inicio"] = $reserva->getFechaInicio();
        $parameters["fin"] = $reserva->getFechaFinal();
        $query = $em->createQuery($dql);
        foreach ($parameters as $name => $value) {
            $query->setParameter($name, $value);
        }
        return $query->getResult();
    }

    public function buscarDivisionesBloqueadasOferta(Oferta $oferta) {

        $em = $this->getEntityManager();
        $fechaInicial = date($oferta->getFechaInicial()->format("Y-m-d"));
        $fechaFinal = date($oferta->getFechaFinal()->format("Y-m-d"));
        $dias = [];
        while ($fechaInicial <= $fechaFinal) {
            $dias[] = date('N', strtotime($fechaInicial));
            $fechaInicial = strtotime('+1 day', strtotime($fechaInicial));
            $fechaInicial = date('Y-m-d', $fechaInicial);
        }
        $em = $this->getEntityManager();
        $dql = "SELECT b FROM LogicBundle:Division d 
                INNER JOIN LogicBundle:OfertaDivision od WITH d.id = od.division 
                INNER JOIN LogicBundle:EscenarioDeportivo e WITH e.id = d.escenarioDeportivo 
                INNER JOIN LogicBundle:Oferta o WITH o.id = od.oferta 
                INNER JOIN LogicBundle:DivisionBloqueo db WITH d.id = db.division AND db.division = od.division
                INNER JOIN LogicBundle:BloqueoEscenario b WITH b.id = db.bloqueos  
                INNER JOIN LogicBundle:Programacion p WITH p.oferta = o.id
                WHERE e.id = :escenario  
                AND (b.fechaInicial BETWEEN :inicio AND :fin OR b.fechaFinal BETWEEN :inicio AND :fin)
                AND ( ";
        $cumplio = false;
        foreach ($oferta->getProgramacion() as $programacion) {
            if ($programacion->getHoraInicial()) {
                if ($cumplio) {
                    $dql .= " OR ";
                }
                $dql .= "((p.horaInicial BETWEEN '" . $programacion->getHoraInicial() . "' AND '" . $programacion->getHoraFinal() . "' OR p.horaFinal BETWEEN '" . $programacion->getHoraInicial() . "' AND '" . $programacion->getHoraFinal() . "') AND p.dia = " . $programacion->getDia()->getId() . ")";
                $cumplio = true;
            }
        }
        $dql .= ")";

        $parameters = [];
        $parameters["escenario"] = $oferta->getEscenarioDeportivo()->getId();
        $parameters["inicio"] = $oferta->getFechaInicial();
        $parameters["fin"] = $oferta->getFechaFinal();
        $query = $em->createQuery($dql);
        foreach ($parameters as $name => $value) {
            $query->setParameter($name, $value);
        }

        return $query->getResult();
    }

    public function consultarBloqueos($escenarioDeportivo, $inicio, $fin) {
        $em = $this->getEntityManager();
        $bloqueos = $em->getRepository("LogicBundle:BloqueoEscenario")->createQueryBuilder("b")
                        ->where(":inicio BETWEEN b.fechaInicial AND b.fechaFinal OR :fin BETWEEN b.fechaInicial AND b.fechaFinal")
                        ->andWhere("b.escenarioDeportivo = :escenario")
                        ->setParameter("inicio", $inicio)
                        ->setParameter("fin", $fin)
                        ->setParameter("escenario", $escenarioDeportivo)
                        ->getQuery()->getResult();
        $respuesta = [];
        if ($respuesta) {
            $respuesta[0]['inicio'] = $bloqueos[0]->getFechaInicial()->format("Y-m-d");
            $respuesta[0]['fin'] = $bloqueos[count($bloqueos) - 1]->getFechaFInal()->format("Y-m-d");
        }
        return $respuesta;
    }

}
