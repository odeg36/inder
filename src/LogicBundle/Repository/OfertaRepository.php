<?php

namespace LogicBundle\Repository;

use Application\Sonata\UserBundle\Entity\User;
use DateInterval;
use DatePeriod;
use Doctrine\ORM\EntityRepository;
use Exception;
use LogicBundle\Entity\BloqueoEscenario;
use LogicBundle\Entity\Oferta;
use LogicBundle\Entity\Reserva;

/**
 * OfertaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OfertaRepository extends EntityRepository {

    public function ofertaCreadaOcupada($idOferta, $object) {

        $escenario = $object->getEscenarioDeportivo() != null ? $object->getEscenarioDeportivo()->getId() : 0;
        $puntoAtencion = $object->getPuntoAtencion() != null ? $object->getPuntoAtencion()->getId() : 0;
        $fechaInicio = $object->getFechaInicial();
        $fechafin = $object->getFechaFinal();
        $em = $this->getEntityManager();

        $inicio = $fechaInicio;
        $fin = $fechafin;
        $fin = $fin->add(new \DateInterval('PT23H59M59S'));

        $intervalo = new DateInterval('P1D');
        $rangoFechas = new DatePeriod($inicio, $intervalo, $fin);

        $fechas = [];

        foreach ($rangoFechas as $fecha) {
            array_push($fechas, $fecha->format("Y-m-d"));
        }

        $condicionPuntoAtencion = $puntoAtencion != 0 ? 'o.puntoAtencion = ' . $puntoAtencion : 'o.escenarioDeportivo = ' . $escenario;

        $repository = $em->getRepository(Oferta::class)
                ->createQueryBuilder('o')
                ->where($condicionPuntoAtencion)
                ->andWhere('o.fecha_inicial IN(:fechainicio) OR o.fecha_final IN(:fechafin)')
                ->andWhere('o.id <> :idOferta')
                ->setParameter('fechainicio', $fechas)
                ->setParameter('fechafin', $fechas)
                ->setParameter('idOferta', $idOferta);
        return $repository->getQuery()->getResult();
    }

    public function buscarUsuariosRol($query, $tipoIdentificacion, $rol, $value) {
        $query
                ->innerJoin($query->getRootAlias() . '.groups', 'g')
                ->where("g.roles LIKE '%" . $rol . "%'")
                ->andWhere($query->getRootAlias() . ".tipoIdentificacion = :tipoId")
                ->andWhere($query->getRootAlias() . ".numeroIdentificacion like '%" . $value . "%'")
                ->setParameter('tipoId', $tipoIdentificacion);
        return $query;
    }

    public function buscarOferta(User $usuario, $id = null) {
        $em = $this->getEntityManager();

        $query = $em->getRepository("LogicBundle:Oferta")
                ->createQueryBuilder("o")
                ->leftJoin("o.formador", "f")
                ->leftJoin("o.gestor", "g")
                ->where("f.id = :usuario OR g.id = :usuario")
                ->setParameter("usuario", $usuario->getId());

        if ($id) {
            $query->andWhere("o.id = :id")
                    ->setParameter("id", $id);

            return $query->getQuery()->getOneOrNullResult();
        }

        return $query;
    }

    public function getPreinscritosAlfabeticamente($oferta) {
        $em = $this->getEntityManager();

        $qb = $em->getRepository('LogicBundle:PreinscripcionOferta')
                ->createQueryBuilder("p")
                ->leftJoin("p.usuario", "u")
                ->where("p.oferta = :oferta")
                ->orderBy('u.lastname', 'ASC')
                ->setParameter("oferta", $oferta->getId());
        $query = $qb->getQuery();
        $preinscritos = $query->getResult();
        return $preinscritos;
    }

    public function findByFormador($oferta, $formador) {
        try {
            $em = $this->getEntityManager();
            return $em->getRepository('LogicBundle:Oferta')->findOneBy(['id' => $oferta, 'formador' => $formador]);
        } catch (Exception $e) {
            return null;
        }
    }

    public function ofertaPorFormador(Oferta $oferta, $datos) {
        $em = $this->getEntityManager();
        $res = [];
        try {
            $em = $this->getEntityManager();
            $horaInicial = new \DateTime($datos['horaInicio']);
            $horaInicial->format('Y-m-d  H:i:s');
            $horaFinal = new \DateTime($datos['horaFin']);
            $horaFinal->format('Y-m-d  H:i:s');
            $qb = $em->getRepository("LogicBundle:Oferta")
                    ->createQueryBuilder("o")
                    ->innerJoin("o.formador", "f")
                    ->innerJoin("o.programacion", "p")
                    ->where("f.id = :formador")
                    ->andWhere("p.dia = :dia")
                    ->andWhere("o.activo = :activo")
                    ->andWhere("o.fecha_inicial >= :fechainicial")
                    ->andWhere("o.fecha_final <= :fechafinal")
                    ->andWhere("p.horaInicial BETWEEN :horaInicial AND :horaFinal OR p.horaFinal BETWEEN :horaInicial AND :horaFinal")
                    ->setParameter("activo", true)
                    ->setParameter("horaInicial", $horaInicial)
                    ->setParameter("horaFinal", $horaFinal)
                    ->setParameter("formador", $oferta->getFormador()->getId())
                    ->setParameter("dia", $datos['dia'])
                    ->setParameter("fechainicial", $oferta->getFechaInicial())
                    ->setParameter("fechafinal", $oferta->getFechaFinal());
            if ($oferta->getId()) {
                $qb->andWhere("o.id != :id")
                        ->setParameter("id", $oferta);
            }
            $res = $qb->getQuery()->getResult();
            if ($res) {
                $res[1] = "cruce_formador";
            }
        } catch (\Exception $e) {
            if ($res) {
                $res[1] = "error";
            }
        }
        return $res;
    }

    public function OfertaPorFormadorDivision(Oferta $oferta, $datos, $ofertaDivision) {
        $res = [];
        try {
            $ofertasFormador = $this->ofertaPorFormador($oferta, $datos);
            if ($ofertasFormador) {
                $ofertasFormador[1] = "cruce";
                return $ofertasFormador;
            }
            $horaInicial = new \DateTime($datos['horaInicio']);
            $horaInicial->format('Y-m-d  H:i:s');
            $horaFinal = new \DateTime($datos['horaFin']);
            $horaFinal->format('Y-m-d  H:i:s');
            $em = $this->getEntityManager();
            $qb = $em->getRepository("LogicBundle:Oferta")
                    ->createQueryBuilder("o")
                    ->innerJoin("o.formador", "f")
                    ->innerJoin("o.programacion", "p")
                    ->andWhere("p.dia = :dia")
                    ->andWhere("o.fecha_inicial >= :fechainicial")
                    ->andWhere("o.fecha_final <= :fechafinal")
                    ->andWhere("p.horaInicial BETWEEN :horaInicial AND :horaFinal OR p.horaFinal BETWEEN :horaInicial AND :horaFinal")
                    ->setParameter("dia", $datos['dia'])
                    ->setParameter("horaInicial", $horaInicial)
                    ->setParameter("horaFinal", $horaFinal)
                    ->setParameter("fechainicial", $oferta->getFechaInicial()->format("Y-m-d"))
                    ->setParameter("fechafinal", $oferta->getFechaFinal()->format("Y-m-d"));
            if (count($oferta->getDivisiones()) > 0) {
                $qb->join("o.divisiones", "d")
                        ->andWhere("d.division = :division")
                        ->setParameter("division", $ofertaDivision->getDivision());
            } else if ($oferta->getEscenarioDeportivo()) {
                $qb->andWhere("o.escenarioDeportivo = :escenario")
                        ->setParameter("escenario", $oferta->getEscenarioDeportivo());
            }
            if ($oferta->getId()) {
                $qb->andWhere("o.id != :id")
                        ->setParameter("id", $oferta->getId());
            }
            $res = $qb->getQuery()->getResult();

            if ($res) {
                $res[1] = "cruce";
            }
        } catch (\Exception $e) {
            $res[1] = "error";
        }
        return $res;
    }

    public function obtenerConsecutivo(Oferta $oferta) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('o');
        $qb
                ->select('count(o.id)')
                ->from('LogicBundle:Oferta', 'o')
                ->andWhere('o.fecha_final >= :fecha')
                ->andWhere('o.estrategia = :estrategia')
                ->setParameter('fecha', '2018-01-01 0:0:0')
                ->setParameter('estrategia', $oferta->getEstrategia())
        ;
        $count = $qb->getQuery()->getSingleScalarResult();
        return $count += 1;
    }

    public function buscarCruceReservas($reserva) {
        $em = $this->getEntityManager();
        $divisiones = [];
        $escenarioDeportivo = $em->getRepository('LogicBundle:EscenarioDeportivo')->findOneById($reserva->escenario_deportivo);
        foreach ($escenarioDeportivo->getDivisiones() as $division) {
            $divisiones[] = $division->getId();
        }
        $dias = [];
        $ofertas = $em->getRepository("LogicBundle:Oferta")->createQueryBuilder("o")
                ->join("o.divisiones", "od")
                ->join("od.division", "d")
                ->join("o.programacion", "p")
                ->where("d.id IN (:divisiones)");
        foreach ($reserva->programaciones as $programacion) {
            if ($programacion->inicioManana && $programacion->inicioTarde) {
                $dias[] = $programacion->dia;
                $ofertas->andWhere(":inicio BETWEEN p.horaInicial AND p.horaFinal OR :fin BETWEEN  p.horaInicial AND p.horaFinal")
                        ->setParameter("inicio", $programacion->inicioManana)
                        ->setParameter("fin", $programacion->finTarde);
            } else if ($programacion->inicioTarde) {
                $dias[] = $programacion->dia;
                $ofertas->andWhere(":inicio BETWEEN p.horaInicial AND p.horaFinal OR :fin BETWEEN  p.horaInicial AND p.horaFinal")
                        ->setParameter("inicio", $programacion->inicioTarde)
                        ->setParameter("fin", $programacion->finTarde);
            } else if ($programacion->inicioManana) {
                $dias[] = $programacion->dia;
                $ofertas->andWhere(":inicio BETWEEN p.horaInicial AND p.horaFinal OR :fin BETWEEN  p.horaInicial AND p.horaFinal")
                        ->setParameter("inicio", $programacion->inicioManana)
                        ->setParameter("fin", $programacion->finManana);
            }
        }
        $ofertas->andWhere("p.dia in (:dias)")
                ->andWhere(":fechaInicial BETWEEN o.fecha_inicial AND o.fecha_final OR :fechaFinal BETWEEN o.fecha_inicial AND o.fecha_final")
                ->setParameter("divisiones", $divisiones)
                ->setParameter("dias", $dias)
                ->setParameter("fechaInicial", $reserva->fechaInicio)
                ->setParameter("fechaFinal", $reserva->fechaFinal);
        return $ofertas->getQuery()->getResult();
    }

    public function obtenerDivisionesOcupadas(Reserva $reserva) {
        $em = $this->getEntityManager();
        $dias = [];
        $divisiones = $em->getRepository("LogicBundle:Division")->createQueryBuilder("d")
                ->join("d.divisiones", "od")
                ->join("od.oferta", "o")
                ->join("o.programacion", "p")
                ->where("d.escenarioDeportivo = :escenario")
                ->andWhere("o.fecha_inicial BETWEEN :fechaInicio AND :fechaFin OR o.fecha_final BETWEEN :fechaInicio AND :fechaFin OR :fechaInicio BETWEEN o.fecha_inicial AND o.fecha_final OR :fechaFin BETWEEN o.fecha_inicial AND o.fecha_final");
        foreach ($reserva->getProgramaciones() as $programacion) {
            if ($programacion->getInicioManana() && $programacion->getInicioTarde()) {
                $dias[] = $programacion->getDia();
                $divisiones->andWhere(":inicio BETWEEN p.horaInicial AND p.horaFinal OR :fin BETWEEN  p.horaInicial AND p.horaFinal")
                        ->setParameter("inicio", $programacion->getInicioManana())
                        ->setParameter("fin", $programacion->getFinTarde());
            } else if ($programacion->getInicioTarde()) {
                $dias[] = $programacion->getDia();
                $divisiones->andWhere(":inicio BETWEEN p.horaInicial AND p.horaFinal OR :fin BETWEEN  p.horaInicial AND p.horaFinal")
                        ->setParameter("inicio", $programacion->getInicioTarde())
                        ->setParameter("fin", $programacion->getFinTarde());
            } else if ($programacion->getInicioManana()) {
                $dias[] = $programacion->getDia();
                $divisiones->andWhere(":inicio BETWEEN p.horaInicial AND p.horaFinal OR :fin BETWEEN  p.horaInicial AND p.horaFinal")
                        ->setParameter("inicio", $programacion->getInicioManana())
                        ->setParameter("fin", $programacion->getFinManana());
            }
        }
        $divisiones
                ->setParameter("dias", $dias)
                ->andWhere("p.dia NOT IN (:dias)")
                ->setParameter("escenario", $reserva->getEscenarioDeportivo())
                ->setParameter("fechaInicio", $reserva->getFechaInicio())
                ->setParameter("fechaFin", $reserva->getFechaFinal());
        return $divisiones->getQuery()->getResult();
    }

    public function buscarOfertasBloqueo(BloqueoEscenario $bloqueoEscenario) {
        $fechaInicial = date($bloqueoEscenario->getFechaInicial()->format("Y-m-d"));
        $fechaFinal = date($bloqueoEscenario->getFechaFinal()->format("Y-m-d"));
        $dias = [];
        while ($fechaInicial <= $fechaFinal) {
            $dias[] = date('N', strtotime($fechaInicial));
            $fechaInicial = strtotime('+1 day', strtotime($fechaInicial));
            $fechaInicial = date('Y-m-d', $fechaInicial);
        }
        $em = $this->getEntityManager();
        $dql = "SELECT o FROM LogicBundle:Oferta o
                INNER JOIN LogicBundle:EscenarioDeportivo e WITH e.id = o.escenarioDeportivo 
                INNER JOIN LogicBundle:Division d WITH d.escenarioDeportivo = e.id 
                INNER JOIN LogicBundle:OfertaDivision od WITH od.division = d.id 
                INNER JOIN LogicBundle:Programacion p WITH p.oferta = o.id
                WHERE e.id = :escenario 
                AND (o.fecha_inicial BETWEEN :inicio AND :fin OR o.fecha_final BETWEEN :inicio AND :fin)
                AND (p.horaInicial BETWEEN :hinicio AND :hfin OR p.horaFinal BETWEEN :hinicio AND :hfin)
                AND p.dia IN (:dias)
                AND o.activo = :activo";
        $parameters = [];
        $parameters["escenario"] = $bloqueoEscenario->getEscenarioDeportivo()->getId();
        $parameters["inicio"] = $bloqueoEscenario->getFechaInicial();
        $parameters["fin"] = $bloqueoEscenario->getFechaFinal();
        $parameters["hinicio"] = $bloqueoEscenario->getHoraInicial();
        $parameters["hfin"] = $bloqueoEscenario->getHoraFinal();
        $parameters["dias"] = $dias;
        $parameters["activo"] = true;
        $query = $em->createQuery($dql);
        foreach ($parameters as $name => $value) {
            $query->setParameter($name, $value);
        }
        return $query->getResult();
    }

}
