<?php

namespace LogicBundle\Repository;

use Doctrine\ORM\EntityRepository;
use LogicBundle\Entity\BloqueoEscenario;
use LogicBundle\Entity\Oferta;
use LogicBundle\Entity\TipoReserva;

/**
 * ReservaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReservaRepository extends EntityRepository {

    public function buscarCruceOfertas(Oferta $oferta, $form) {
        $em = $this->getEntityManager();
        $divisiones = $form->get("division")->getData();
        $query = $em->getRepository("LogicBundle:Reserva")
                ->createQueryBuilder("r")
                ->join("r.programaciones", "p")
                ->join("r.divisiones", "d")
                ->where("r.escenarioDeportivo = :escenario")
                ->andWhere("d.division IN (:divisiones)")
                ->andWhere("r.fechaInicio BETWEEN :fechaInicial AND :fechaFinal OR r.fechaFinal BETWEEN :fechaInicial AND :fechaFinal")
                ->andWhere("r.estado IN (:estados)")
                ->andWhere("r.completada = :completada")
                ->setParameter("escenario", $oferta->getEscenarioDeportivo())
                ->setParameter("divisiones", $divisiones)
                ->setParameter("fechaInicial", $oferta->getFechaInicial())
                ->setParameter("fechaFinal", $oferta->getFechaFinal())
                ->setParameter("estados", ["Aprobado", "Pre-Reserva", "Pendiente"])
                ->setParameter("completada", true);
        foreach ($oferta->getProgramacion() as $programacion) {
            if ($programacion->getHoraInicial()) {
                $query
                        ->andWhere("p.dia = :dia")
                        ->andWhere("p.inicioManana BETWEEN :inicio AND :fin OR p.finTarde BETWEEN :inicio AND :fin")
                        ->setParameter("dia", $programacion->getDia())
                        ->setParameter("inicio", $programacion->getHoraInicial())
                        ->setParameter("fin", $programacion->getHoraFinal());
            }
        }
        return $query->getQuery()->getResult();
    }

    public function buscarReservasBloqueo(BloqueoEscenario $bloqueoEscenario) {
        $fechaInicial = date($bloqueoEscenario->getFechaInicial()->format("Y-m-d"));
        $fechaFinal = date($bloqueoEscenario->getFechaFinal()->format("Y-m-d"));
        $dias = [];
        while ($fechaInicial <= $fechaFinal) {
            $dias[] = date('N', strtotime($fechaInicial));
            $fechaInicial = strtotime('+1 day', strtotime($fechaInicial));
            $fechaInicial = date('Y-m-d', $fechaInicial);
        }
        $em = $this->getEntityManager();
        $dql = "SELECT r FROM LogicBundle:Reserva r 
                INNER JOIN LogicBundle:EscenarioDeportivo e WITH e.id = r.escenarioDeportivo 
                INNER JOIN LogicBundle:Division d WITH d.escenarioDeportivo = e.id 
                INNER JOIN LogicBundle:DivisionReserva dr WITH dr.division = d.id 
                INNER JOIN LogicBundle:ProgramacionReserva p WITH p.reserva = r.id 
                WHERE e.id = :escenario 
                AND (r.fechaInicio BETWEEN :inicio AND :fin OR r.fechaFinal BETWEEN :inicio AND :fin) 
                AND (p.inicioManana BETWEEN :hinicio AND :hfin OR p.finManana BETWEEN :hinicio AND :hfin OR p.inicioTarde BETWEEN :hinicio AND :hfin OR p.finTarde BETWEEN :hinicio AND :hfin) 
                AND p.dia IN (:dias) 
                AND r.estado IN (:estados)";
        $parameters = [];
        $parameters["escenario"] = $bloqueoEscenario->getEscenarioDeportivo()->getId();
        $parameters["inicio"] = $bloqueoEscenario->getFechaInicial();
        $parameters["fin"] = $bloqueoEscenario->getFechaFinal();
        $parameters["hinicio"] = $bloqueoEscenario->getHoraInicial();
        $parameters["hfin"] = $bloqueoEscenario->getHoraFinal();
        $parameters["dias"] = $dias;
        $parameters["estados"] = ["Aprobado", "Pre-Reserva", "Pendiente"];
        $query = $em->createQuery($dql);
        foreach ($parameters as $name => $value) {
            $query->setParameter($name, $value);
        }
        return $query->getResult();
    }

    public function buscarReservasTipoEscenario($escenario_deportivo, $usuario) {

        $escenarioDeportivo = $em->getRepository("LogicBundle:EscenarioDeportivo")->findOneById($escenario_deportivo);
        return $em->getRepository("LogicBundle:Reserva")->createQueryBuilder("r")
                        ->join("r.escenarioDeportivo", "ed")
                        ->leftJoin("r.asistenciaReservas", "a")
                        ->where("r.usuario = :usuario")
                        ->andWhere("ed.tipoEscenario = :tipoEscenario")
                        ->andWhere("r.estado IN (:estados)")
                        ->andWhere("a.id IS NULL")
                        ->setParameter("usuario", $usuario)
                        ->setParameter("tipoEscenario", $escenarioDeportivo->getTipoEscenario())
                        ->setParameter("estados", ["Aprobado", "Pre-Reserva", "Pendiente"])->getQuery()->getResult();
    }

    public function consultarReservas($id, $escenarioDeportivo, $fechaInicio, $fechaFinal, $mantenimientos) {
        $em = $this->getEntityManager();
        $query = $em->getRepository('LogicBundle:Reserva')->createQueryBuilder('r')
                ->where("r.fechaInicio BETWEEN :fechaInicio AND :fechaFinal OR r.fechaFinal BETWEEN :fechaInicio AND :fechaFinal")
                ->andWhere("r.estado != :rechazado")
                ->andWhere("r.estado != :prereserva")
                ->andWhere("r.escenarioDeportivo = :escenario")
                ->setParameter("fechaInicio", $fechaInicio)
                ->setParameter("fechaFinal", $fechaFinal)
                ->setParameter("escenario", $escenarioDeportivo)
                ->setParameter("rechazado", "Rechazado")
                ->setParameter("prereserva", "Pre-reserva");
        if ($mantenimientos) {
            $query->join("r.tipoReserva", "t")
                    ->andWhere("t.nombre = :tipoReserva")
                    ->setParameter("tipoReserva", TipoReserva::TIPOS_RESERVA[2]);
        }
        if ($id > 0) {
            $query->andWhere("r.id != :id")
                    ->setParameter("id", $id);
        }
        $reservas = $query->getQuery()->getResult();
        if (!$reservas) {
            return null;
        }
        $respuesta = [];
        $inicio = new \DateTime();
        $final = $reservas[0]->getFechaFinal();
        foreach ($reservas as $key => $reserva) {
            if ($inicio > $reserva->getFechaInicio()) {
                $inicio = $reserva->getFechaInicio();
            }
            if ($final < $reserva->getFechaFinal()) {
                $final = $reserva->getFechaFinal();
            }
        }
        $respuesta[$key]['inicio'] = $inicio->format("Y-m-d");
        $respuesta[$key]['fin'] = $final->format("Y-m-d");
        return $respuesta;
    }

    public function comprobarDiasPrevios($escenarioDeportivo, $fechaInicial, $programaciones) {
        $em = $this->getEntityManager();
        $hoy = new \DateTime();
        $hoy = new \DateTime($hoy->format("Y-m-d"));
        $fechaInicial = new \DateTime($fechaInicial);
        $respuesta = [];
        $diasMinimos = 10;
        if ($hoy > $fechaInicial) {
            $respuesta["error"] = true;
            $respuesta["mensaje"] = $this->trans->trans("error.programar.fecha_inicial_menor");
            return $respuesta;
        }
        $disponibilidad = false;
        $interval = $hoy->diff($fechaInicial);
        $dias = $interval->format('%R%a');
        $bloque_disponible = false;
        $bloque = 0;
        $minimo = 1000000;
        $maximo = 0;
        foreach ($escenarioDeportivo->getDivisiones() as $division) {
            if ($division->getTiposReservaEscenarioDeportivo() != null) {
                foreach ($division->getTiposReservaEscenarioDeportivo() as $tiposReservaEscenarioDeportivo) {
                    foreach ($tiposReservaEscenarioDeportivo->getTipoReservaEscenarioDeportivoDivisiones() as $tipo) {
                        $diasPrevios = $tipo->getDiasPreviosReserva();
                        if ($diasPrevios < $diasMinimos) {
                            $diasMinimos = $diasPrevios;
                        }
                        if ($dias >= $diasPrevios) {
                            $disponibilidad = true;
                        }
                        if ($tipo->getBloqueTiempo() > $bloque) {
                            $bloque = $tipo->getBloqueTiempo();
                            if ($bloque * $tipo->getTiempoMinimo() < $minimo) {
                                $minimo = $bloque * $tipo->getTiempoMinimo();
                            }
                            if ($bloque * $tipo->getTiempoMaximo() > $maximo) {
                                $maximo = $bloque * $tipo->getTiempoMaximo();
                            }
                        }
                        foreach ($programaciones as $programacion) {
                            $dia = $em->getRepository('LogicBundle:Dia')->findOneById($programacion->dia);
                            $inicioManana = $programacion->inicioManana;
                            $finManana = $programacion->finManana;
                            if ($inicioManana != "hh:mm" && $finManana != "hh:mm" && $inicioManana != "" && $finManana != "") {
                                $im = new \DateTime($inicioManana);
                                $fm = new \DateTime($finManana);
                                $intManana = $im->diff($fm);
                                $diff_manana = $intManana->h * 60 + $intManana->i;
                                if ($diff_manana >= $minimo && $diff_manana <= $maximo) {
                                    $bloque_disponible = true;
                                } else {
                                    continue;
                                }
                            }
                            $inicioTarde = $programacion->inicioTarde;
                            $finTarde = $programacion->finTarde;
                            if ($inicioTarde != "hh:mm" && $finTarde != "hh:mm" && $inicioTarde != "" && $finTarde != "") {
                                $it = new \DateTime($inicioTarde);
                                $ft = new \DateTime($finTarde);
                                $intTarde = $it->diff($ft);
                                $diff_tarde = $intTarde->h * 60 + $intTarde->i;
                                if ($diff_tarde >= $minimo && $diff_tarde <= $maximo) {
                                    $bloque_disponible = true;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (!$bloque_disponible) {
            $respuesta["error"] = true;
            $respuesta["mensaje"] = $this->trans->trans("error.programar.bloque", ["%minimo%" => $minimo, "%maximo%" => $maximo]);
            return $respuesta;
        }
        if ($disponibilidad) {
            $respuesta["error"] = false;
            return $respuesta;
        }
        $respuesta["error"] = true;
        $respuesta["mensaje"] = $this->trans->trans("error.programar.previos", ["%dias%" => $diasMinimos]);
        return $respuesta;
    }

    public function getHorarios($escenarioDeportivo, $manana) {
        if ($manana) {
            $horarioManana = [];
            $horarioManana[1]["inicio"] = $escenarioDeportivo->getHoraInicialLunes();
            $horarioManana[1]["fin"] = $escenarioDeportivo->getHoraFinalLunes();
            $horarioManana[2]["inicio"] = $escenarioDeportivo->getHoraInicialMartes();
            $horarioManana[2]["fin"] = $escenarioDeportivo->getHoraFinalMartes();
            $horarioManana[3]["inicio"] = $escenarioDeportivo->getHoraInicialMiercoles();
            $horarioManana[3]["fin"] = $escenarioDeportivo->getHoraFinalMiercoles();
            $horarioManana[4]["inicio"] = $escenarioDeportivo->getHoraInicialJueves();
            $horarioManana[4]["fin"] = $escenarioDeportivo->getHoraFinalJueves();
            $horarioManana[5]["inicio"] = $escenarioDeportivo->getHoraInicialViernes();
            $horarioManana[5]["fin"] = $escenarioDeportivo->getHoraFinalViernes();
            $horarioManana[6]["inicio"] = $escenarioDeportivo->getHoraInicialSabado();
            $horarioManana[6]["fin"] = $escenarioDeportivo->getHoraFinalSabado();
            $horarioManana[7]["inicio"] = $escenarioDeportivo->getHoraInicialDomingo();
            $horarioManana[7]["fin"] = $escenarioDeportivo->getHoraFinalDomingo();
            return $horarioManana;
        }
        $horarioTarde = [];
        $horarioTarde[1]["inicio"] = $escenarioDeportivo->getHoraInicial2Lunes();
        $horarioTarde[1]["fin"] = $escenarioDeportivo->getHoraFinal2Lunes();
        $horarioTarde[2]["inicio"] = $escenarioDeportivo->getHoraInicial2Martes();
        $horarioTarde[2]["fin"] = $escenarioDeportivo->getHoraFinal2Martes();
        $horarioTarde[3]["inicio"] = $escenarioDeportivo->getHoraInicial2Miercoles();
        $horarioTarde[3]["fin"] = $escenarioDeportivo->getHoraFinal2Miercoles();
        $horarioTarde[4]["inicio"] = $escenarioDeportivo->getHoraInicial2Jueves();
        $horarioTarde[4]["fin"] = $escenarioDeportivo->getHoraFinal2Jueves();
        $horarioTarde[5]["inicio"] = $escenarioDeportivo->getHoraInicial2Viernes();
        $horarioTarde[5]["fin"] = $escenarioDeportivo->getHoraFinal2Viernes();
        $horarioTarde[6]["inicio"] = $escenarioDeportivo->getHoraInicial2Sabado();
        $horarioTarde[6]["fin"] = $escenarioDeportivo->getHoraFinal2Sabado();
        $horarioTarde[7]["inicio"] = $escenarioDeportivo->getHoraInicial2Domingo();
        $horarioTarde[7]["fin"] = $escenarioDeportivo->getHoraFinal2Domingo();
        return $horarioTarde;
    }

}
