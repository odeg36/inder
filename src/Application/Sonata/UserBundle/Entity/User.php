<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Application\Sonata\UserBundle\Entity\BaseUser;
use JMS\Serializer\Annotation as Serializer;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * This file has been generated by the Sonata EasyExtends bundle.
 *
 * @link https://sonata-project.org/bundles/easy-extends
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */

/**
 * User
 *
 * @ORM\Table(name="usuario",uniqueConstraints={@ORM\UniqueConstraint(name="username", columns={"username", "username_canonical"})})
 * @ORM\Entity(repositoryClass="Application\Sonata\UserBundle\Entity\Repository\UserRepository")
 * @Serializer\ExclusionPolicy("all")
 */
class User extends BaseUser {

////************ MODIFICACIONES ********////////////

    const DIRECCION = 'direccion';
    const COMUNA = 'comuna';
    const GENDERS = [
        'gender_male' => "m",
        'gender_female' => "f"
    ];
    const PSICOLOGIAS = "psicologias";
    const FISIOTERAPIAS = "consultasFisioterapia";
    const MEDICOS = "ConsultasMedicas";
    const NUTRICIONES = "nutriciones";

    /**
     * @Serializer\VirtualProperty
     * @Serializer\SerializedName("abreviatura_tipo_ducumento")
     */
    function abreviaturaTipoDucumento() {
       return $this->getTipoIdentificacion()->getAbreviatura();
    }
    
    private $asistio;
    
    public function isAccountNonEnabled() {
        return $this->getEnabled() ? : false;
    }
    
    public function isAccountNonExpired() {
        if($this->getFechaExpiracion()){
            $fechaActual =  new \DateTime();
            
            if($fechaActual > $this->getFechaExpiracion()){
                return false;
            }
        }
        
        return true;
    }

    public function getFullnameIdentificacion() {
        return $this->getFullName() ? $this->getNumeroIdentificacion() . ' - ' . $this->getFullName() : '';
    }

    function getAsistio() {
        return $this->asistio;
    }

    function setAsistio($asistio) {
        $this->asistio = $asistio;
    }

    /**
     * @Serializer\VirtualProperty
     * @Serializer\SerializedName("nombre_completo")
     */
    public function nombreCompleto() {
        return $this->getFirstname() . ' ' . $this->getLastname();
    }

    public function getApellidoNombre() {
        return $this->getLastname() . ' ' . $this->getFirstname();
    }

    public function __construct() {
        $this->salt = base_convert(sha1(uniqid(mt_rand(), true)), 16, 36);
        $this->enabled = false;
        $this->roles = array();
        $this->academicos = new \Doctrine\Common\Collections\ArrayCollection();
        $this->habitacionales = new \Doctrine\Common\Collections\ArrayCollection();
        $this->serviciosPublicos = new \Doctrine\Common\Collections\ArrayCollection();
        $this->familiares = new \Doctrine\Common\Collections\ArrayCollection();
        $this->disciplinas = new \Doctrine\Common\Collections\ArrayCollection();
        $this->mediciones = new \Doctrine\Common\Collections\ArrayCollection();
        $this->perfilCuerpoTecnicos = new \Doctrine\Common\Collections\ArrayCollection();
        $this->eventoRoles = new \Doctrine\Common\Collections\ArrayCollection();
        $this->enabled = false;
    }

    /**
     * Get imagenPerfil
     *
     * @return string
     */
    public function getImagenPerfil() {
        if (!$this->imagen_perfil) {
            $this->imagen_perfil = "img-perfil.png";
        }
        return $this->imagen_perfil;
    }

    /**
     * Add disciplina
     *
     * @param \LogicBundle\Entity\Disciplina $disciplina
     *
     * @return User
     */
    public function addDisciplina(\LogicBundle\Entity\Disciplina $disciplina) {
        $disciplina->addUsuario($this);
        $this->disciplinas[] = $disciplina;

        return $this;
    }

    /**
     * Remove disciplina.
     *
     * @param \LogicBundle\Entity\Disciplina $disciplina
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeDisciplina(\LogicBundle\Entity\Disciplina $disciplina) {
        $disciplina->removeUsuario($this);
        return $this->disciplinas->removeElement($disciplina);
    }

    /**
     * Manages the copying of the file to the relevant place on the server
     */
    public function upload($path, $file) {
        if (null === $file) {
            return;
        }

        $filename = $file->getClientOriginalName();

        $ext = pathinfo($filename, PATHINFO_EXTENSION);
        $filename = uniqid(date('YmdHis')) . '.' . $ext;
        $file->move(
                $path, $filename
        );

        return $filename;
    }

    /**
     * Set informacionExtraUsuario
     *
     * @param \LogicBundle\Entity\InformacionExtraUsuario $informacionExtraUsuario
     *
     * @return User
     */
    public function setInformacionExtraUsuario(\LogicBundle\Entity\InformacionExtraUsuario $informacionExtraUsuario = null) {
        $informacionExtraUsuario->setUsuario($this);
        $this->informacionExtraUsuario = $informacionExtraUsuario;

        return $this;
    }

    /**
     * Add token
     *
     * @param \ITO\OAuthServerBundle\Entity\AccessToken $token
     *
     * @return User
     */
    public function addToken(\ITO\OAuthServerBundle\Entity\AccessToken $token) {
        $token->setUser($this);
        $this->tokens[] = $token;

        return $this;
    }

    /**
     *
     * @param \ITO\OAuthServerBundle\Entity\AccessToken $token
     */
    public function removeToken(\ITO\OAuthServerBundle\Entity\AccessToken $token) {
        $this->tokens->removeElement($token);
    }

    /**
     * Get tokens
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTokens() {
        return $this->tokens;
    }

    /**
     * Add ofertaFormador
     *
     * @param \LogicBundle\Entity\Oferta $ofertaFormador
     *
     * @return User
     */
    public function addOfertaFormador(\LogicBundle\Entity\Oferta $ofertaFormador) {
        $ofertaFormador->setFormador($this);
        $this->ofertaFormador[] = $ofertaFormador;
    }

    /**
     * Add ofertaGestor
     *
     * @param \LogicBundle\Entity\Oferta $ofertaGestor
     *
     * @return User
     */
    public function addOfertaGestor(\LogicBundle\Entity\Oferta $ofertaGestor) {
        $ofertaGestor->setGestor($this);
        $this->ofertaGestor[] = $ofertaGestor;

        return $this;
    }

    /**
     * Add preinscripcione
     *
     * @param \LogicBundle\Entity\PreinscripcionOferta $preinscripcion
     *
     * @return User
     */
    public function addPreinscripcion(\LogicBundle\Entity\PreinscripcionOferta $preinscripcion) {
        $preinscripcion->setUsuario($this);
        $this->preinscripciones[] = $preinscripcion;

        return $this;
    }

    public function getFullName() {

        return $this->firstname . " " . $this->lastname;
    }

    /**
     * Set organizacionDeportiva
     *
     * @param \LogicBundle\Entity\OrganizacionDeportiva $organizacionDeportiva
     *
     * @return User
     */
    public function setOrganizaciondeportiva(\LogicBundle\Entity\OrganizacionDeportiva $organizacionDeportiva = null) {
        if ($organizacionDeportiva) {
            $organizacionDeportiva->addUsuario($this);
        }

        $this->organizacionDeportiva = $organizacionDeportiva;

        return $this;
    }

    /**
     * @param string $role
     * @return bool
     */
    public function hasRole($role) {
        if (in_array($role, $this->getRoles())) {
            return true;
        }
        return false;
    }

    /**
     * Add familiare
     *
     * @param \LogicBundle\Entity\Familiar $familiare
     *
     * @return User
     */
    public function addFamiliare(\LogicBundle\Entity\Familiar $familiare) {
        $familiare->setUsuario($this);
        $this->familiares[] = $familiare;

        return $this;
    }

    /**
     * Add academico
     *
     * @param \LogicBundle\Entity\Academico $academico
     *
     * @return User
     */
    public function addAcademico(\LogicBundle\Entity\Academico $academico) {
        $academico->setUsuario($this);
        $this->academicos[] = $academico;

        return $this;
    }

    /**
     * Add serviciosPublico
     *
     * @param \LogicBundle\Entity\ServicioPublico $serviciosPublico
     *
     * @return User
     */
    public function addServiciosPublico(\LogicBundle\Entity\ServicioPublico $serviciosPublico) {
        $serviciosPublico->setUsuario($this);
        $this->serviciosPublicos[] = $serviciosPublico;

        return $this;
    }

    public function getRoleEspecialista() {
        foreach ($this->getRoles() as $rol) {
            switch ($rol) {
                case "ROLE_MEDICO":
                case "ROLE_FISIOTERAPEUTA ":
                case "ROLE_PSICOLOGO":
                case "ROLE_NUTRICIONISTA":
                    return $rol;
            }
        }
        return "";
    }

    public function getDeporteAleatorio() {
        $deportes = $this->getDisciplinas();
        $deporte = null;
        if (count($deportes) > 0) {
            $deporte = $deportes[rand(0, count($deportes) - 1)];
        }
        return $deporte;
    }

    /**
     * Add psicologia
     *
     * @param \LogicBundle\Entity\ConsultaPsicologia $psicologia
     *
     * @return User
     */
    public function addPsicologia(\LogicBundle\Entity\ConsultaPsicologia $psicologia) {
        $psicologia->setDeportista($this);
        $this->psicologias[] = $psicologia;

        return $this;
    }

    public function __toString() {
        return (string) trim($this->nombreCompleto()) != "" ? $this->nombreCompleto() : $this->numeroIdentificacion ?: "";
    }

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @var string
     * @ORM\Column(type="string", name="registro_profesional", length=255, nullable=true)
     */
    protected $registro_profesional;

    /**
     * @var string
     * @ORM\Column(type="string", name="codigo_institucional", length=255, nullable=true)
     */
    protected $codigo_institucional;

    /**
     * @var string
     *
     * @ORM\Column(name="tipo_persona", type="string", length=255, nullable=true)
     */
    private $tipoPersona;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\TipoIdentificacion")
     * @ORM\JoinColumn(name="tipo_identificacion_id", referencedColumnName="id", nullable=true)
     * @Serializer\Expose
     */
    private $tipoIdentificacion;

    /**
     * @var string
     *
     * @ORM\Column(name="numero_identificacion", type="string", length=255, nullable=true)
     * @Serializer\Expose
     */
    private $numeroIdentificacion;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\Barrio", inversedBy="usuarios")
     * @ORM\JoinColumn(name="barrio_id", referencedColumnName="id", nullable=true)
     */
    private $barrio;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\OrientacionSexual", inversedBy="usuarios")
     * @ORM\JoinColumn(name="orientacion_sexual_id", referencedColumnName="id", nullable=true)
     */
    private $orientacionSexual;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\Estrato", inversedBy="usuarios")
     * @ORM\JoinColumn(name="estrato_id", referencedColumnName="id", nullable=true)
     */
    private $estrato;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\Etnia", inversedBy="usuarios")
     * @ORM\JoinColumn(name="etnia_id", referencedColumnName="id", nullable=true)
     */
    private $etnia;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\Oferta", mappedBy="formador")
     */
    private $ofertaFormador;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\Oferta", mappedBy="gestor")
     */
    private $ofertaGestor;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\Medicion", mappedBy="deportista")
     */
    private $mediciones;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\PerfilCuerpoTecnico", mappedBy="deportista")
     */
    private $perfilCuerpoTecnicos;

    /**
     * @var string
     *
     * @ORM\Column(name="implementacion", type="text", nullable=true)
     */
    private $implementacion;

    /**
     * @var string
     *
     * @ORM\Column(name="direccion_comuna", type="string", length=255, nullable=true)
     */
    private $direccionComuna;

    /**
     * @var string
     *
     * @ORM\Column(name="direccion", type="string", length=255, nullable=true)
     */
    private $direccionResidencia;

    /**
     * @var \DateTime $fechaCreacion
     *
     * @Gedmo\Timestampable(on="create")
     * @ORM\Column(name="fecha_creacion", type="date")
     */
    protected $fechaCreacion;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\PreinscripcionOferta", mappedBy="usuario")
     */
    private $preinscripciones;

    /**
     * @var \DateTime $fechaActualizacion
     *
     * @Gedmo\Timestampable(on="update")
     * @ORM\Column(name="fecha_actualizacion", type="date")
     */
    protected $fechaActualizacion;

    /**
     * @var \DateTime $fechaCreacion
     *
     * @ORM\Column(name="fecha_expiracion", type="date", nullable=true)
     */
    protected $fechaExpiracion;

    /**
     * @var boolean
     * @ORM\Column(type="boolean", name="acepta_habeas_data", nullable=true)
     */
    protected $aceptahb;

    /**
     * One Product has Many Features.
     * @ORM\OneToMany(targetEntity="ITO\OAuthServerBundle\Entity\AccessToken", mappedBy="user")
     * @Serializer\Exclude
     */
    protected $tokens;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\Eps", inversedBy="usuarios")
     * @ORM\JoinColumn(name="eps_id", referencedColumnName="id", nullable=true)
     */
    private $eps;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\NivelEscolaridad", inversedBy="usuarios")
     * @ORM\JoinColumn(name="nivel_escolaridad_id", referencedColumnName="id", nullable=true)
     */
    private $nivelEscolaridad;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\TipoEstablecimientoEducativo", inversedBy="usuarios")
     * @ORM\JoinColumn(name="tipo_establecimiento_educativo_id", referencedColumnName="id", nullable=true)
     */
    private $tipoEstablecimientoEducativo;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\EstablecimientoEducativo", inversedBy="usuarios")
     * @ORM\JoinColumn(name="establecimiento_educativo_id", referencedColumnName="id", nullable=true)
     */
    private $establecimientoEducativo;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\Ocupacion", inversedBy="usuarios")
     * @ORM\JoinColumn(name="ocupacion_id", referencedColumnName="id", nullable=true)
     */
    private $ocupacion;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\TipoDesplazado", inversedBy="usuarios")
     * @ORM\JoinColumn(name="tipo_desplazado_id", referencedColumnName="id", nullable=true)
     */
    private $tipoDesplazado;

    /**
     * Many Disciplina have Many Users.
     * @ORM\ManyToMany(targetEntity="LogicBundle\Entity\Disciplina", mappedBy="usuarios", cascade={"all"})     
     */
    private $disciplinas;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\EstadoCivil", inversedBy="usuarios")
     * @ORM\JoinColumn(name="estado_civil_id", referencedColumnName="id", nullable=true)
     */
    private $estadoCivil;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\TipoSangre", inversedBy="usuarios")
     * @ORM\JoinColumn(name="tipo_sangre_id", referencedColumnName="id", nullable=true)
     */
    private $tipoSangre;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\Discapacidad", inversedBy="usuarios")
     * @ORM\JoinColumn(name="discapacidad_id", referencedColumnName="id", nullable=true)
     */
    private $discapacidad;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\SubDiscapacidad", inversedBy="usuarios")
     * @ORM\JoinColumn(name="sub_discapacidad_id", referencedColumnName="id", nullable=true)
     */
    private $subDiscapacidad;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\Encuesta", mappedBy="usuario")
     */
    private $encuestas;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\EncuestaRespuesta", mappedBy="usuario")
     */
    private $encuestaRespuestas;

    /**
     * @var boolean
     * @ORM\Column(type="boolean", name="es_jefe_cabeza_hogar", nullable=true)
     */
    protected $esJefeCabezaHogar;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\OrganismoDeportista", mappedBy="usuarioDeportista")
     */
    private $deportistas;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\JugadorEvento", mappedBy="usuarioJugadorEvento")
     */
    private $jugadorEventos;

    /**
     * @ORM\OneToOne(targetEntity="LogicBundle\Entity\InformacionExtraUsuario", inversedBy="usuario",cascade={"persist"})
     */
    private $informacionExtraUsuario;

    /**
     * @var string
     *
     * @ORM\Column(name="imagen_perfil", type="string", length=255, nullable=true)
     */
    private $imagen_perfil;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\Asistencia", mappedBy="usuario")
     */
    private $asistencias;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\AsistenciaReserva", mappedBy="usuario")
     */
    private $asistenciaReservas;
    //muchos a muchos por reservas
    /**
     * Many Reserva have Many Users.
     * @ORM\ManyToMany(targetEntity="LogicBundle\Entity\Reserva", mappedBy="usuarios")     
     */
    private $reservas;

    /**
     * @ORM\ManyToOne(targetEntity="LogicBundle\Entity\OrganizacionDeportiva", inversedBy="usuarios")
     * @ORM\JoinColumn(name="organizacion_deportiva_id", referencedColumnName="id", nullable=true)
     */
    private $organizacionDeportiva;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\ConsultaMedico", mappedBy="deportista")
     */
    private $ConsultasMedicas;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\ConsultaNutricion", mappedBy="deportista")
     */
    private $nutriciones;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\GaleriaDeportista", mappedBy="deportista")
     */
    private $galerias;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\ResultadoDeportista", mappedBy="deportista")
     */
    private $resultadosDeportista;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\EventoRol", mappedBy="usuario")
     */
    private $eventoRoles;

    /**
     * Manages the copying of the file to the relevant place on the server
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\ConsultaPsicologia", mappedBy="deportista")
     */
    private $psicologias;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\ConsultaFisioterapia", mappedBy="deportista")
     */
    private $consultasFisioterapia;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\ConsumoSuplemento", mappedBy="medico")
     */
    private $consumoSuplementos;

    /**
     * @var string
     *
     * @ORM\Column(name="twitter", type="string", length=255, nullable=true)
     */
    private $twitter;

    /**
     * @var string
     *
     * @ORM\Column(name="facebook", type="string", length=255, nullable=true)
     */
    private $facebook;

    /**
     * @var string
     *
     * @ORM\Column(name="instagram", type="string", length=255, nullable=true)
     */
    private $instagram;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\Academico", mappedBy="usuario", cascade={"persist"})
     */
    private $academicos;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\Habitacional", mappedBy="usuario", cascade={"persist"})
     */
    private $habitacionales;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\ServicioPublico", mappedBy="usuario", cascade={"persist"})
     */
    private $serviciosPublicos;

    /**
     * @var string
     *
     * @ORM\Column(name="slogan", type="string", length=255, nullable=true)
     */
    private $slogan;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\Familiar", mappedBy="usuario", cascade={"persist"})
     */
    private $familiares;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\ObservacionEspecialidad", mappedBy="deportista")
     */
    private $observacionEspecialidades;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\UsuarioEscenarioDeportivo", mappedBy="usuario")
     */
    private $usuariosEscenariosDeportivos;

    /**
     * @ORM\ManyToMany(targetEntity="Application\Sonata\UserBundle\Entity\Group")
     * @ORM\JoinTable(name="fos_user_user_group",
     *      joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="group_id", referencedColumnName="id")}
     * )
     */
    protected $groups;

    /**
     * @ORM\OneToMany(targetEntity="LogicBundle\Entity\UsuarioDivisionReserva", mappedBy="usuario")
     */
    private $divisionReservas;

    public function getEdad() {
        $fecha = $this->getDateOfBirth();
        if (!$fecha) {
            return '';
        }

        if (gettype($fecha) == "object") {
            $fecha = $fecha->format("Y-m-d");
        }

        $tiempo = strtotime($fecha);
        $ahora = time();
        $edad = ($ahora - $tiempo) / (60 * 60 * 24 * 365.25);
        $edad = floor($edad);
        return $edad;
    }

    ////************ FIN MODIFICACIONES ********////////////

    /**
     * Set registroProfesional.
     *
     * @param string|null $registroProfesional
     *
     * @return User
     */
    public function setRegistroProfesional($registroProfesional = null) {
        $this->registro_profesional = $registroProfesional;

        return $this;
    }

    /**
     * Get registroProfesional.
     *
     * @return string|null
     */
    public function getRegistroProfesional() {
        return $this->registro_profesional;
    }

    /**
     * Set codigoInstitucional.
     *
     * @param string|null $codigoInstitucional
     *
     * @return User
     */
    public function setCodigoInstitucional($codigoInstitucional = null) {
        $this->codigo_institucional = $codigoInstitucional;

        return $this;
    }

    /**
     * Get codigoInstitucional.
     *
     * @return string|null
     */
    public function getCodigoInstitucional() {
        return $this->codigo_institucional;
    }

    /**
     * Set tipoPersona.
     *
     * @param string|null $tipoPersona
     *
     * @return User
     */
    public function setTipoPersona($tipoPersona = null) {
        $this->tipoPersona = $tipoPersona;

        return $this;
    }

    /**
     * Get tipoPersona.
     *
     * @return string|null
     */
    public function getTipoPersona() {
        return $this->tipoPersona;
    }

    /**
     * Set numeroIdentificacion.
     *
     * @param string|null $numeroIdentificacion
     *
     * @return User
     */
    public function setNumeroIdentificacion($numeroIdentificacion = null) {
        $this->numeroIdentificacion = $numeroIdentificacion;

        return $this;
    }

    /**
     * Get numeroIdentificacion.
     *
     * @return string|null
     */
    public function getNumeroIdentificacion() {
        return $this->numeroIdentificacion;
    }

    /**
     * Set implementacion.
     *
     * @param string|null $implementacion
     *
     * @return User
     */
    public function setImplementacion($implementacion = null) {
        $this->implementacion = $implementacion;

        return $this;
    }

    /**
     * Get implementacion.
     *
     * @return string|null
     */
    public function getImplementacion() {
        return $this->implementacion;
    }

    /**
     * Set direccionComuna.
     *
     * @param string|null $direccionComuna
     *
     * @return User
     */
    public function setDireccionComuna($direccionComuna = null) {
        $this->direccionComuna = $direccionComuna;

        return $this;
    }

    /**
     * Get direccionComuna.
     *
     * @return string|null
     */
    public function getDireccionComuna() {
        return $this->direccionComuna;
    }

    /**
     * Set direccionResidencia.
     *
     * @param string|null $direccionResidencia
     *
     * @return User
     */
    public function setDireccionResidencia($direccionResidencia = null) {
        $this->direccionResidencia = $direccionResidencia;

        return $this;
    }

    /**
     * Get direccionResidencia.
     *
     * @return string|null
     */
    public function getDireccionResidencia() {
        return $this->direccionResidencia;
    }

    /**
     * Set fechaCreacion.
     *
     * @param \DateTime $fechaCreacion
     *
     * @return User
     */
    public function setFechaCreacion($fechaCreacion) {
        $this->fechaCreacion = $fechaCreacion;

        return $this;
    }

    /**
     * Get fechaCreacion.
     *
     * @return \DateTime
     */
    public function getFechaCreacion() {
        return $this->fechaCreacion;
    }

    /**
     * Set fechaActualizacion.
     *
     * @param \DateTime $fechaActualizacion
     *
     * @return User
     */
    public function setFechaActualizacion($fechaActualizacion) {
        $this->fechaActualizacion = $fechaActualizacion;

        return $this;
    }

    /**
     * Get fechaActualizacion.
     *
     * @return \DateTime
     */
    public function getFechaActualizacion() {
        return $this->fechaActualizacion;
    }

    /**
     * Set fechaExpiracion.
     *
     * @param \DateTime|null $fechaExpiracion
     *
     * @return User
     */
    public function setFechaExpiracion($fechaExpiracion = null) {
        $this->fechaExpiracion = $fechaExpiracion;

        return $this;
    }

    /**
     * Get fechaExpiracion.
     *
     * @return \DateTime|null
     */
    public function getFechaExpiracion() {
        return $this->fechaExpiracion;
    }

    /**
     * Set aceptahb.
     *
     * @param bool|null $aceptahb
     *
     * @return User
     */
    public function setAceptahb($aceptahb = null) {
        $this->aceptahb = $aceptahb;

        return $this;
    }

    /**
     * Get aceptahb.
     *
     * @return bool|null
     */
    public function getAceptahb() {
        return $this->aceptahb;
    }

    /**
     * Set esJefeCabezaHogar.
     *
     * @param bool|null $esJefeCabezaHogar
     *
     * @return User
     */
    public function setEsJefeCabezaHogar($esJefeCabezaHogar = null) {
        $this->esJefeCabezaHogar = $esJefeCabezaHogar;

        return $this;
    }

    /**
     * Get esJefeCabezaHogar.
     *
     * @return bool|null
     */
    public function getEsJefeCabezaHogar() {
        return $this->esJefeCabezaHogar;
    }

    /**
     * Set imagenPerfil.
     *
     * @param string|null $imagenPerfil
     *
     * @return User
     */
    public function setImagenPerfil($imagenPerfil = null) {
        $this->imagen_perfil = $imagenPerfil;

        return $this;
    }

    /**
     * Set twitter.
     *
     * @param string|null $twitter
     *
     * @return User
     */
    public function setTwitter($twitter = null) {
        $this->twitter = $twitter;

        return $this;
    }

    /**
     * Get twitter.
     *
     * @return string|null
     */
    public function getTwitter() {
        return $this->twitter;
    }

    /**
     * Set facebook.
     *
     * @param string|null $facebook
     *
     * @return User
     */
    public function setFacebook($facebook = null) {
        $this->facebook = $facebook;

        return $this;
    }

    /**
     * Get facebook.
     *
     * @return string|null
     */
    public function getFacebook() {
        return $this->facebook;
    }

    /**
     * Set instagram.
     *
     * @param string|null $instagram
     *
     * @return User
     */
    public function setInstagram($instagram = null) {
        $this->instagram = $instagram;

        return $this;
    }

    /**
     * Get instagram.
     *
     * @return string|null
     */
    public function getInstagram() {
        return $this->instagram;
    }

    /**
     * Set slogan.
     *
     * @param string|null $slogan
     *
     * @return User
     */
    public function setSlogan($slogan = null) {
        $this->slogan = $slogan;

        return $this;
    }

    /**
     * Get slogan.
     *
     * @return string|null
     */
    public function getSlogan() {
        return $this->slogan;
    }

    /**
     * Set tipoIdentificacion.
     *
     * @param \LogicBundle\Entity\TipoIdentificacion|null $tipoIdentificacion
     *
     * @return User
     */
    public function setTipoIdentificacion(\LogicBundle\Entity\TipoIdentificacion $tipoIdentificacion = null) {
        $this->tipoIdentificacion = $tipoIdentificacion;

        return $this;
    }

    /**
     * Get tipoIdentificacion.
     *
     * @return \LogicBundle\Entity\TipoIdentificacion|null
     */
    public function getTipoIdentificacion() {
        return $this->tipoIdentificacion;
    }

    /**
     * Set barrio.
     *
     * @param \LogicBundle\Entity\Barrio|null $barrio
     *
     * @return User
     */
    public function setBarrio(\LogicBundle\Entity\Barrio $barrio = null) {
        $this->barrio = $barrio;

        return $this;
    }

    /**
     * Get barrio.
     *
     * @return \LogicBundle\Entity\Barrio|null
     */
    public function getBarrio() {
        return $this->barrio;
    }

    /**
     * Set orientacionSexual.
     *
     * @param \LogicBundle\Entity\OrientacionSexual|null $orientacionSexual
     *
     * @return User
     */
    public function setOrientacionSexual(\LogicBundle\Entity\OrientacionSexual $orientacionSexual = null) {
        $this->orientacionSexual = $orientacionSexual;

        return $this;
    }

    /**
     * Get orientacionSexual.
     *
     * @return \LogicBundle\Entity\OrientacionSexual|null
     */
    public function getOrientacionSexual() {
        return $this->orientacionSexual;
    }

    /**
     * Set estrato.
     *
     * @param \LogicBundle\Entity\Estrato|null $estrato
     *
     * @return User
     */
    public function setEstrato(\LogicBundle\Entity\Estrato $estrato = null) {
        $this->estrato = $estrato;

        return $this;
    }

    /**
     * Get estrato.
     *
     * @return \LogicBundle\Entity\Estrato|null
     */
    public function getEstrato() {
        return $this->estrato;
    }

    /**
     * Set etnia.
     *
     * @param \LogicBundle\Entity\Etnia|null $etnia
     *
     * @return User
     */
    public function setEtnia(\LogicBundle\Entity\Etnia $etnia = null) {
        $this->etnia = $etnia;

        return $this;
    }

    /**
     * Get etnia.
     *
     * @return \LogicBundle\Entity\Etnia|null
     */
    public function getEtnia() {
        return $this->etnia;
    }

    /**
     * Remove ofertaFormador.
     *
     * @param \LogicBundle\Entity\Oferta $ofertaFormador
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeOfertaFormador(\LogicBundle\Entity\Oferta $ofertaFormador) {
        return $this->ofertaFormador->removeElement($ofertaFormador);
    }

    /**
     * Get ofertaFormador.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getOfertaFormador() {
        return $this->ofertaFormador;
    }

    /**
     * Remove ofertaGestor.
     *
     * @param \LogicBundle\Entity\Oferta $ofertaGestor
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeOfertaGestor(\LogicBundle\Entity\Oferta $ofertaGestor) {
        return $this->ofertaGestor->removeElement($ofertaGestor);
    }

    /**
     * Get ofertaGestor.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getOfertaGestor() {
        return $this->ofertaGestor;
    }

    /**
     * Add medicione.
     *
     * @param \LogicBundle\Entity\Medicion $medicione
     *
     * @return User
     */
    public function addMedicione(\LogicBundle\Entity\Medicion $medicione) {
        $this->mediciones[] = $medicione;

        return $this;
    }

    /**
     * Remove medicione.
     *
     * @param \LogicBundle\Entity\Medicion $medicione
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeMedicione(\LogicBundle\Entity\Medicion $medicione) {
        return $this->mediciones->removeElement($medicione);
    }

    /**
     * Get mediciones.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getMediciones() {
        return $this->mediciones;
    }

    /**
     * Add perfilCuerpoTecnico.
     *
     * @param \LogicBundle\Entity\PerfilCuerpoTecnico $perfilCuerpoTecnico
     *
     * @return User
     */
    public function addPerfilCuerpoTecnico(\LogicBundle\Entity\PerfilCuerpoTecnico $perfilCuerpoTecnico) {
        $this->perfilCuerpoTecnicos[] = $perfilCuerpoTecnico;

        return $this;
    }

    /**
     * Remove perfilCuerpoTecnico.
     *
     * @param \LogicBundle\Entity\PerfilCuerpoTecnico $perfilCuerpoTecnico
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removePerfilCuerpoTecnico(\LogicBundle\Entity\PerfilCuerpoTecnico $perfilCuerpoTecnico) {
        return $this->perfilCuerpoTecnicos->removeElement($perfilCuerpoTecnico);
    }

    /**
     * Get perfilCuerpoTecnicos.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPerfilCuerpoTecnicos() {
        return $this->perfilCuerpoTecnicos;
    }

    /**
     * Add preinscripcione.
     *
     * @param \LogicBundle\Entity\PreinscripcionOferta $preinscripcione
     *
     * @return User
     */
    public function addPreinscripcione(\LogicBundle\Entity\PreinscripcionOferta $preinscripcione) {
        $this->preinscripciones[] = $preinscripcione;

        return $this;
    }

    /**
     * Remove preinscripcione.
     *
     * @param \LogicBundle\Entity\PreinscripcionOferta $preinscripcione
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removePreinscripcione(\LogicBundle\Entity\PreinscripcionOferta $preinscripcione) {
        return $this->preinscripciones->removeElement($preinscripcione);
    }

    /**
     * Get preinscripciones.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPreinscripciones() {
        return $this->preinscripciones;
    }

    /**
     * Set eps.
     *
     * @param \LogicBundle\Entity\Eps|null $eps
     *
     * @return User
     */
    public function setEps(\LogicBundle\Entity\Eps $eps = null) {
        $this->eps = $eps;

        return $this;
    }

    /**
     * Get eps.
     *
     * @return \LogicBundle\Entity\Eps|null
     */
    public function getEps() {
        return $this->eps;
    }

    /**
     * Set nivelEscolaridad.
     *
     * @param \LogicBundle\Entity\NivelEscolaridad|null $nivelEscolaridad
     *
     * @return User
     */
    public function setNivelEscolaridad(\LogicBundle\Entity\NivelEscolaridad $nivelEscolaridad = null) {
        $this->nivelEscolaridad = $nivelEscolaridad;

        return $this;
    }

    /**
     * Get nivelEscolaridad.
     *
     * @return \LogicBundle\Entity\NivelEscolaridad|null
     */
    public function getNivelEscolaridad() {
        return $this->nivelEscolaridad;
    }

    /**
     * Set tipoEstablecimientoEducativo.
     *
     * @param \LogicBundle\Entity\TipoEstablecimientoEducativo|null $tipoEstablecimientoEducativo
     *
     * @return User
     */
    public function setTipoEstablecimientoEducativo(\LogicBundle\Entity\TipoEstablecimientoEducativo $tipoEstablecimientoEducativo = null) {
        $this->tipoEstablecimientoEducativo = $tipoEstablecimientoEducativo;

        return $this;
    }

    /**
     * Get tipoEstablecimientoEducativo.
     *
     * @return \LogicBundle\Entity\TipoEstablecimientoEducativo|null
     */
    public function getTipoEstablecimientoEducativo() {
        return $this->tipoEstablecimientoEducativo;
    }

    /**
     * Set establecimientoEducativo.
     *
     * @param \LogicBundle\Entity\EstablecimientoEducativo|null $establecimientoEducativo
     *
     * @return User
     */
    public function setEstablecimientoEducativo(\LogicBundle\Entity\EstablecimientoEducativo $establecimientoEducativo = null) {
        $this->establecimientoEducativo = $establecimientoEducativo;

        return $this;
    }

    /**
     * Get establecimientoEducativo.
     *
     * @return \LogicBundle\Entity\EstablecimientoEducativo|null
     */
    public function getEstablecimientoEducativo() {
        return $this->establecimientoEducativo;
    }

    /**
     * Set ocupacion.
     *
     * @param \LogicBundle\Entity\Ocupacion|null $ocupacion
     *
     * @return User
     */
    public function setOcupacion(\LogicBundle\Entity\Ocupacion $ocupacion = null) {
        $this->ocupacion = $ocupacion;

        return $this;
    }

    /**
     * Get ocupacion.
     *
     * @return \LogicBundle\Entity\Ocupacion|null
     */
    public function getOcupacion() {
        return $this->ocupacion;
    }

    /**
     * Set tipoDesplazado.
     *
     * @param \LogicBundle\Entity\TipoDesplazado|null $tipoDesplazado
     *
     * @return User
     */
    public function setTipoDesplazado(\LogicBundle\Entity\TipoDesplazado $tipoDesplazado = null) {
        $this->tipoDesplazado = $tipoDesplazado;

        return $this;
    }

    /**
     * Get tipoDesplazado.
     *
     * @return \LogicBundle\Entity\TipoDesplazado|null
     */
    public function getTipoDesplazado() {
        return $this->tipoDesplazado;
    }

    /**
     * Get disciplinas.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getDisciplinas() {
        return $this->disciplinas;
    }

    /**
     * Set estadoCivil.
     *
     * @param \LogicBundle\Entity\EstadoCivil|null $estadoCivil
     *
     * @return User
     */
    public function setEstadoCivil(\LogicBundle\Entity\EstadoCivil $estadoCivil = null) {
        $this->estadoCivil = $estadoCivil;

        return $this;
    }

    /**
     * Get estadoCivil.
     *
     * @return \LogicBundle\Entity\EstadoCivil|null
     */
    public function getEstadoCivil() {
        return $this->estadoCivil;
    }

    /**
     * Set tipoSangre.
     *
     * @param \LogicBundle\Entity\TipoSangre|null $tipoSangre
     *
     * @return User
     */
    public function setTipoSangre(\LogicBundle\Entity\TipoSangre $tipoSangre = null) {
        $this->tipoSangre = $tipoSangre;

        return $this;
    }

    /**
     * Get tipoSangre.
     *
     * @return \LogicBundle\Entity\TipoSangre|null
     */
    public function getTipoSangre() {
        return $this->tipoSangre;
    }

    /**
     * Set discapacidad.
     *
     * @param \LogicBundle\Entity\Discapacidad|null $discapacidad
     *
     * @return User
     */
    public function setDiscapacidad(\LogicBundle\Entity\Discapacidad $discapacidad = null) {
        $this->discapacidad = $discapacidad;

        return $this;
    }

    /**
     * Get discapacidad.
     *
     * @return \LogicBundle\Entity\Discapacidad|null
     */
    public function getDiscapacidad() {
        return $this->discapacidad;
    }

    /**
     * Set subDiscapacidad.
     *
     * @param \LogicBundle\Entity\SubDiscapacidad|null $subDiscapacidad
     *
     * @return User
     */
    public function setSubDiscapacidad(\LogicBundle\Entity\SubDiscapacidad $subDiscapacidad = null) {
        $this->subDiscapacidad = $subDiscapacidad;

        return $this;
    }

    /**
     * Get subDiscapacidad.
     *
     * @return \LogicBundle\Entity\SubDiscapacidad|null
     */
    public function getSubDiscapacidad() {
        return $this->subDiscapacidad;
    }

    /**
     * Add encuesta.
     *
     * @param \LogicBundle\Entity\Encuesta $encuesta
     *
     * @return User
     */
    public function addEncuesta(\LogicBundle\Entity\Encuesta $encuesta) {
        $this->encuestas[] = $encuesta;

        return $this;
    }

    /**
     * Remove encuesta.
     *
     * @param \LogicBundle\Entity\Encuesta $encuesta
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeEncuesta(\LogicBundle\Entity\Encuesta $encuesta) {
        return $this->encuestas->removeElement($encuesta);
    }

    /**
     * Get encuestas.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getEncuestas() {
        return $this->encuestas;
    }

    /**
     * Add encuestaRespuesta.
     *
     * @param \LogicBundle\Entity\EncuestaRespuesta $encuestaRespuesta
     *
     * @return User
     */
    public function addEncuestaRespuesta(\LogicBundle\Entity\EncuestaRespuesta $encuestaRespuesta) {
        $this->encuestaRespuestas[] = $encuestaRespuesta;

        return $this;
    }

    /**
     * Remove encuestaRespuesta.
     *
     * @param \LogicBundle\Entity\EncuestaRespuesta $encuestaRespuesta
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeEncuestaRespuesta(\LogicBundle\Entity\EncuestaRespuesta $encuestaRespuesta) {
        return $this->encuestaRespuestas->removeElement($encuestaRespuesta);
    }

    /**
     * Get encuestaRespuestas.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getEncuestaRespuestas() {
        return $this->encuestaRespuestas;
    }

    /**
     * Add deportista.
     *
     * @param \LogicBundle\Entity\OrganismoDeportista $deportista
     *
     * @return User
     */
    public function addDeportista(\LogicBundle\Entity\OrganismoDeportista $deportista) {
        $this->deportistas[] = $deportista;

        return $this;
    }

    /**
     * Remove deportista.
     *
     * @param \LogicBundle\Entity\OrganismoDeportista $deportista
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeDeportista(\LogicBundle\Entity\OrganismoDeportista $deportista) {
        return $this->deportistas->removeElement($deportista);
    }

    /**
     * Get deportistas.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getDeportistas() {
        return $this->deportistas;
    }

    /**
     * Add jugadorEvento.
     *
     * @param \LogicBundle\Entity\JugadorEvento $jugadorEvento
     *
     * @return User
     */
    public function addJugadorEvento(\LogicBundle\Entity\JugadorEvento $jugadorEvento) {
        $this->jugadorEventos[] = $jugadorEvento;

        return $this;
    }

    /**
     * Remove jugadorEvento.
     *
     * @param \LogicBundle\Entity\JugadorEvento $jugadorEvento
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeJugadorEvento(\LogicBundle\Entity\JugadorEvento $jugadorEvento) {
        return $this->jugadorEventos->removeElement($jugadorEvento);
    }

    /**
     * Get jugadorEventos.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getJugadorEventos() {
        return $this->jugadorEventos;
    }

    /**
     * Get informacionExtraUsuario.
     *
     * @return \LogicBundle\Entity\InformacionExtraUsuario|null
     */
    public function getInformacionExtraUsuario() {
        return $this->informacionExtraUsuario;
    }

    /**
     * Add asistencia.
     *
     * @param \LogicBundle\Entity\Asistencia $asistencia
     *
     * @return User
     */
    public function addAsistencia(\LogicBundle\Entity\Asistencia $asistencia) {
        $this->asistencias[] = $asistencia;

        return $this;
    }

    /**
     * Remove asistencia.
     *
     * @param \LogicBundle\Entity\Asistencia $asistencia
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeAsistencia(\LogicBundle\Entity\Asistencia $asistencia) {
        return $this->asistencias->removeElement($asistencia);
    }

    /**
     * Get asistencias.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAsistencias() {
        return $this->asistencias;
    }

    /**
     * Add asistenciaReserva.
     *
     * @param \LogicBundle\Entity\AsistenciaReserva $asistenciaReserva
     *
     * @return User
     */
    public function addAsistenciaReserva(\LogicBundle\Entity\AsistenciaReserva $asistenciaReserva) {
        $this->asistenciaReservas[] = $asistenciaReserva;

        return $this;
    }

    /**
     * Remove asistenciaReserva.
     *
     * @param \LogicBundle\Entity\AsistenciaReserva $asistenciaReserva
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeAsistenciaReserva(\LogicBundle\Entity\AsistenciaReserva $asistenciaReserva) {
        return $this->asistenciaReservas->removeElement($asistenciaReserva);
    }

    /**
     * Get asistenciaReservas.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAsistenciaReservas() {
        return $this->asistenciaReservas;
    }

    /**
     * Add reserva.
     *
     * @param \LogicBundle\Entity\Reserva $reserva
     *
     * @return User
     */
    public function addReserva(\LogicBundle\Entity\Reserva $reserva) {
        $this->reservas[] = $reserva;

        return $this;
    }

    /**
     * Remove reserva.
     *
     * @param \LogicBundle\Entity\Reserva $reserva
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeReserva(\LogicBundle\Entity\Reserva $reserva) {
        return $this->reservas->removeElement($reserva);
    }

    /**
     * Get reservas.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getReservas() {
        return $this->reservas;
    }

    /**
     * Get organizacionDeportiva.
     *
     * @return \LogicBundle\Entity\OrganizacionDeportiva|null
     */
    public function getOrganizacionDeportiva() {
        return $this->organizacionDeportiva;
    }

    /**
     * Add consultasMedica.
     *
     * @param \LogicBundle\Entity\ConsultaMedico $consultasMedica
     *
     * @return User
     */
    public function addConsultasMedica(\LogicBundle\Entity\ConsultaMedico $consultasMedica) {
        $this->ConsultasMedicas[] = $consultasMedica;

        return $this;
    }

    /**
     * Remove consultasMedica.
     *
     * @param \LogicBundle\Entity\ConsultaMedico $consultasMedica
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeConsultasMedica(\LogicBundle\Entity\ConsultaMedico $consultasMedica) {
        return $this->ConsultasMedicas->removeElement($consultasMedica);
    }

    /**
     * Get consultasMedicas.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getConsultasMedicas() {
        return $this->ConsultasMedicas;
    }

    /**
     * Add nutricione.
     *
     * @param \LogicBundle\Entity\ConsultaNutricion $nutricione
     *
     * @return User
     */
    public function addNutricione(\LogicBundle\Entity\ConsultaNutricion $nutricione) {
        $this->nutriciones[] = $nutricione;

        return $this;
    }

    /**
     * Remove nutricione.
     *
     * @param \LogicBundle\Entity\ConsultaNutricion $nutricione
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeNutricione(\LogicBundle\Entity\ConsultaNutricion $nutricione) {
        return $this->nutriciones->removeElement($nutricione);
    }

    /**
     * Get nutriciones.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getNutriciones() {
        return $this->nutriciones;
    }

    /**
     * Add galeria.
     *
     * @param \LogicBundle\Entity\GaleriaDeportista $galeria
     *
     * @return User
     */
    public function addGaleria(\LogicBundle\Entity\GaleriaDeportista $galeria) {
        $this->galerias[] = $galeria;

        return $this;
    }

    /**
     * Remove galeria.
     *
     * @param \LogicBundle\Entity\GaleriaDeportista $galeria
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeGaleria(\LogicBundle\Entity\GaleriaDeportista $galeria) {
        return $this->galerias->removeElement($galeria);
    }

    /**
     * Get galerias.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getGalerias() {
        return $this->galerias;
    }

    /**
     * Add resultadosDeportistum.
     *
     * @param \LogicBundle\Entity\ResultadoDeportista $resultadosDeportistum
     *
     * @return User
     */
    public function addResultadosDeportistum(\LogicBundle\Entity\ResultadoDeportista $resultadosDeportistum) {
        $this->resultadosDeportista[] = $resultadosDeportistum;

        return $this;
    }

    /**
     * Remove resultadosDeportistum.
     *
     * @param \LogicBundle\Entity\ResultadoDeportista $resultadosDeportistum
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeResultadosDeportistum(\LogicBundle\Entity\ResultadoDeportista $resultadosDeportistum) {
        return $this->resultadosDeportista->removeElement($resultadosDeportistum);
    }

    /**
     * Get resultadosDeportista.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getResultadosDeportista() {
        return $this->resultadosDeportista;
    }

    /**
     * Add eventoRole.
     *
     * @param \LogicBundle\Entity\EventoRol $eventoRole
     *
     * @return User
     */
    public function addEventoRole(\LogicBundle\Entity\EventoRol $eventoRole) {
        $this->eventoRoles[] = $eventoRole;

        return $this;
    }

    /**
     * Remove eventoRole.
     *
     * @param \LogicBundle\Entity\EventoRol $eventoRole
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeEventoRole(\LogicBundle\Entity\EventoRol $eventoRole) {
        return $this->eventoRoles->removeElement($eventoRole);
    }

    /**
     * Get eventoRoles.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getEventoRoles() {
        return $this->eventoRoles;
    }

    /**
     * Remove psicologia.
     *
     * @param \LogicBundle\Entity\ConsultaPsicologia $psicologia
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removePsicologia(\LogicBundle\Entity\ConsultaPsicologia $psicologia) {
        return $this->psicologias->removeElement($psicologia);
    }

    /**
     * Get psicologias.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPsicologias() {
        return $this->psicologias;
    }

    /**
     * Add consultasFisioterapium.
     *
     * @param \LogicBundle\Entity\ConsultaFisioterapia $consultasFisioterapium
     *
     * @return User
     */
    public function addConsultasFisioterapium(\LogicBundle\Entity\ConsultaFisioterapia $consultasFisioterapium) {
        $this->consultasFisioterapia[] = $consultasFisioterapium;

        return $this;
    }

    /**
     * Remove consultasFisioterapium.
     *
     * @param \LogicBundle\Entity\ConsultaFisioterapia $consultasFisioterapium
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeConsultasFisioterapium(\LogicBundle\Entity\ConsultaFisioterapia $consultasFisioterapium) {
        return $this->consultasFisioterapia->removeElement($consultasFisioterapium);
    }

    /**
     * Get consultasFisioterapia.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getConsultasFisioterapia() {
        return $this->consultasFisioterapia;
    }

    /**
     * Add consumoSuplemento.
     *
     * @param \LogicBundle\Entity\ConsumoSuplemento $consumoSuplemento
     *
     * @return User
     */
    public function addConsumoSuplemento(\LogicBundle\Entity\ConsumoSuplemento $consumoSuplemento) {
        $this->consumoSuplementos[] = $consumoSuplemento;

        return $this;
    }

    /**
     * Remove consumoSuplemento.
     *
     * @param \LogicBundle\Entity\ConsumoSuplemento $consumoSuplemento
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeConsumoSuplemento(\LogicBundle\Entity\ConsumoSuplemento $consumoSuplemento) {
        return $this->consumoSuplementos->removeElement($consumoSuplemento);
    }

    /**
     * Get consumoSuplementos.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getConsumoSuplementos() {
        return $this->consumoSuplementos;
    }

    /**
     * Remove academico.
     *
     * @param \LogicBundle\Entity\Academico $academico
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeAcademico(\LogicBundle\Entity\Academico $academico) {
        return $this->academicos->removeElement($academico);
    }

    /**
     * Get academicos.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAcademicos() {
        return $this->academicos;
    }

    /**
     * Add habitacionale.
     *
     * @param \LogicBundle\Entity\Habitacional $habitacionale
     *
     * @return User
     */
    public function addHabitacionale(\LogicBundle\Entity\Habitacional $habitacionale) {
        $this->habitacionales[] = $habitacionale;

        return $this;
    }

    /**
     * Remove habitacionale.
     *
     * @param \LogicBundle\Entity\Habitacional $habitacionale
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeHabitacionale(\LogicBundle\Entity\Habitacional $habitacionale) {
        return $this->habitacionales->removeElement($habitacionale);
    }

    /**
     * Get habitacionales.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getHabitacionales() {
        return $this->habitacionales;
    }

    /**
     * Remove serviciosPublico.
     *
     * @param \LogicBundle\Entity\ServicioPublico $serviciosPublico
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeServiciosPublico(\LogicBundle\Entity\ServicioPublico $serviciosPublico) {
        return $this->serviciosPublicos->removeElement($serviciosPublico);
    }

    /**
     * Get serviciosPublicos.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getServiciosPublicos() {
        return $this->serviciosPublicos;
    }

    /**
     * Remove familiare.
     *
     * @param \LogicBundle\Entity\Familiar $familiare
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeFamiliare(\LogicBundle\Entity\Familiar $familiare) {
        return $this->familiares->removeElement($familiare);
    }

    /**
     * Get familiares.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getFamiliares() {
        return $this->familiares;
    }

    /**
     * Add observacionEspecialidade.
     *
     * @param \LogicBundle\Entity\ObservacionEspecialidad $observacionEspecialidade
     *
     * @return User
     */
    public function addObservacionEspecialidade(\LogicBundle\Entity\ObservacionEspecialidad $observacionEspecialidade) {
        $this->observacionEspecialidades[] = $observacionEspecialidade;

        return $this;
    }

    /**
     * Remove observacionEspecialidade.
     *
     * @param \LogicBundle\Entity\ObservacionEspecialidad $observacionEspecialidade
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeObservacionEspecialidade(\LogicBundle\Entity\ObservacionEspecialidad $observacionEspecialidade) {
        return $this->observacionEspecialidades->removeElement($observacionEspecialidade);
    }

    /**
     * Get observacionEspecialidades.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getObservacionEspecialidades() {
        return $this->observacionEspecialidades;
    }

    /**
     * Add usuariosEscenariosDeportivo.
     *
     * @param \LogicBundle\Entity\UsuarioEscenarioDeportivo $usuariosEscenariosDeportivo
     *
     * @return User
     */
    public function addUsuariosEscenariosDeportivo(\LogicBundle\Entity\UsuarioEscenarioDeportivo $usuariosEscenariosDeportivo) {
        $this->usuariosEscenariosDeportivos[] = $usuariosEscenariosDeportivo;

        return $this;
    }

    /**
     * Remove usuariosEscenariosDeportivo.
     *
     * @param \LogicBundle\Entity\UsuarioEscenarioDeportivo $usuariosEscenariosDeportivo
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeUsuariosEscenariosDeportivo(\LogicBundle\Entity\UsuarioEscenarioDeportivo $usuariosEscenariosDeportivo) {
        return $this->usuariosEscenariosDeportivos->removeElement($usuariosEscenariosDeportivo);
    }

    /**
     * Get usuariosEscenariosDeportivos.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUsuariosEscenariosDeportivos() {
        return $this->usuariosEscenariosDeportivos;
    }

    /**
     * Add divisionReserva.
     *
     * @param \LogicBundle\Entity\UsuarioDivisionReserva $divisionReserva
     *
     * @return User
     */
    public function addDivisionReserva(\LogicBundle\Entity\UsuarioDivisionReserva $divisionReserva) {
        $this->divisionReservas[] = $divisionReserva;

        return $this;
    }

    /**
     * Remove divisionReserva.
     *
     * @param \LogicBundle\Entity\UsuarioDivisionReserva $divisionReserva
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeDivisionReserva(\LogicBundle\Entity\UsuarioDivisionReserva $divisionReserva) {
        return $this->divisionReservas->removeElement($divisionReserva);
    }

    /**
     * Get divisionReservas.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getDivisionReservas() {
        return $this->divisionReservas;
    }

}
