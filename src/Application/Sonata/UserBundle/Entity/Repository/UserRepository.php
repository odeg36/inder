<?php

namespace Application\Sonata\UserBundle\Entity\Repository;

use LogicBundle\Entity\Oferta;
use Application\Sonata\UserBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository {

    public function buscarUsuarioDeportista($username, $rol) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u");

        $query->leftJoin('u.groups', 'g')
                ->where($query->expr()->orX(
                                $query->expr()->like('u.roles', ':roles'), $query->expr()->like('g.roles', ':roles')
                ))
                ->andWhere("u.username = :username")
                ->setParameter('roles', '%"' . $rol . '"%')
                ->setParameter('username', $username);

        return $query->getQuery()->getResult();
    }
    
    public function buscarUsuarios($username) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u")
                ->andWhere("u.username LIKE :username")
                ->setParameter('username', $username . '%');
        return $query->getQuery()->getResult();
    }
    
    public function buscarUsuario($username) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u")
                ->andWhere("u.username  = :username")
                ->setParameter('username', $username );
        return $query->getQuery()->getResult();
    }

    public function buscarUsarioPreinscritoOferta(Oferta $oferta, User $usuario) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u")
                ->join('u.preinscripciones', 'p')
                ->join('p.oferta', 'o')
                ->where('p.usuario = :usuario')
                ->andWhere('p.oferta = :oferta')
                ->setParameter('usuario', $usuario)
                ->setParameter('oferta', $oferta)
                ->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult();
    }

    public function buscarAsistentesOfertaHorario($oferta, $fecha = null, $returnQuery = false) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u")
                ->innerJoin("u.asistencias", "a")
                ->innerJoin("a.oferta", "o")
                ->where('o.id = :oferta')
                ->andWhere('a.fecha = :fecha');

        $query->setParameters([
            "fecha" => $fecha,
            "oferta" => $oferta
        ]);
        if ($returnQuery) {
            return $query;
        }
        return $query->getQuery()->getResult();
    }

    public function buscarAsistentesReservaHorario($reserva, $fecha) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u")
                ->innerJoin("u.asistenciaReservas", "ar")
                ->innerJoin("ar.reserva", "r")
                ->where('r.id = :reserva')
                ->andWhere('ar.fecha = :fecha');

        $query->setParameters([
            "fecha" => $fecha,
            "reserva" => $reserva
        ]);

        return $query->getQuery()->getResult();
    }

    public function buscarUsuariosPreinscritos($username, $oferta) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u");

        $query
                ->leftJoin('u.groups', 'g')
                ->leftJoin('u.preinscripciones', 'p')
                ->leftJoin('p.oferta', 'o')
                ->andWhere("u.username = :username")
                ->andWhere("o.id = :oferta")
                ->andWhere("p.activo = :activo")
                ->setParameters([
                    'username' => $username,
                    'oferta' => $oferta,
                    'activo' => true
        ]);

        return $query->getQuery()->getResult();
    }

    public function buscarUsuariosReserva($username, $reserva) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u");

        $query
                ->innerJoin('u.reservas', 'r')
                ->andWhere("u.username = :username")
                ->andWhere("r.id = :reserva")
                ->setParameters([
                    'username' => $username,
                    'reserva' => $reserva
        ]);

        return $query->getQuery()->getResult();
    }

    public function buscarUsername($username, $id = null, $multiple = false) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u")
                ->where("u.username = :username")
                ->setParameter('username', $username);

        if ($id) {
            $query
                    ->andWhere("u.id != :id")
                    ->setParameter('id', $id);
        }

        if($multiple == true){
            return $query->getQuery()->getResult();
        }
        return $query->getQuery()->getOneOrNullResult();
    }

    public function buscarUsernameQuery($queryBuilder, $valor, $id = null) {
        $queryBuilder
                ->where($queryBuilder->getRootAlias() . '.numeroIdentificacion' . " LIKE '%" . $valor . "%' OR " . $queryBuilder->getRootAlias() . '.username' . " LIKE '%" . $valor . "%'")
                ->andWhere($queryBuilder->getRootAlias() . '.organizacionDeportiva IS NULL');

        return $queryBuilder;
    }

    public function buscarGrupoUsuario($usuario, $grupo) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u")
                ->innerJoin("u.groups", "g")
                ->where("u.id = :usuario")
                ->andWhere("g.id = :grupo")
                ->setParameter('usuario', $usuario)
                ->setParameter('grupo', $grupo);

        return $query->getQuery()->getOneOrNullResult();
    }

    public function buscarUsuarioID($id) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u")
                ->where('u.id = :id');

        $query->setParameters([
            "id" => $id
        ]);

        return $query;
    }

    public function buscarDeportista($id, $rol, $muliple = false) {
        $em = $this->getEntityManager();

        $query = $em->getRepository('ApplicationSonataUserBundle:User')
                ->createQueryBuilder("u");

        $query->leftJoin('u.groups', 'g')
                ->where($query->expr()->orX(
                                $query->expr()->like('u.roles', ':roles'), $query->expr()->like('g.roles', ':roles')
                ))
                ->andWhere("u.id = :id")
                ->setParameter('roles', '%"' . $rol . '"%')
                ->setParameter('id', $id);

        if ($muliple) {
            return $query->getQuery()->getResult();
        }

        return $query->getQuery()->getOneOrNullResult();
    }

    public function buscarUsuariosPorRolEIdentificacionNombre($rol, $nombreOIdentificacion) {
        $em = $this->getEntityManager();

        $qb = $em->getRepository('ApplicationSonataUserBundle:User')->createQueryBuilder('u');
        $qb
                ->leftJoin('u.groups', 'g')
                ->where($qb->expr()->orX(
                                $qb->expr()->like('u.roles', ':roles')
                                , $qb->expr()->like('g.roles', ':roles')
                ))
                ->andWhere(
                        $qb->expr()->orX(
                                $qb->expr()->like('u.firstname', ':nombreIdentificacion')
                                , $qb->expr()->like('u.lastname', ':nombreIdentificacion')
                                , $qb->expr()->like('u.numeroIdentificacion', ':nombreIdentificacion')
                ))
                ->setParameter('roles', '%"' . $rol . '"%')
                ->setParameter('nombreIdentificacion', '%' . $nombreOIdentificacion . '%')
                ->getQuery()
        ;
        $query = $qb->getQuery();
        $result = $query->getResult();
        return $result;
    }

}
